plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.1'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'com.google.cloud.tools.jib' version '3.3.1'
	id 'pmd'
	id 'jacoco'
	id 'checkstyle'
}

ext {
	springCloudVersion = "2024.0.0"
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

jacoco {
	toolVersion = "0.8.12"
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter'
	implementation 'org.springframework.boot:spring-boot-starter-web'

	implementation 'org.springframework.kafka:spring-kafka'
	implementation 'org.springframework.boot:spring-boot-starter-log4j2'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-validation'

	implementation 'org.flywaydb:flyway-core'
	runtimeOnly 'org.postgresql:postgresql'

	implementation 'com.fasterxml.jackson.core:jackson-databind'

	implementation 'org.projectlombok:lombok:1.18.32'
	annotationProcessor 'org.projectlombok:lombok:1.18.32'
}


def commonDependencies = [
		'org.springframework.boot:spring-boot-starter-test',
		'org.projectlombok:lombok:1.18.32'
]

def addLombok = { dependencies ->
	dependencies.implementation 'org.projectlombok:lombok:1.18.32'
	dependencies.annotationProcessor 'org.projectlombok:lombok:1.18.32'
}

def configureSources = { suite, javaSrcDir, resourcesDir ->
	suite.sources {
		java { srcDirs = [javaSrcDir] }
		resources { srcDirs = [resourcesDir] }
	}
}

testing {
	suites {
		unit(JvmTestSuite) {
			configureSources(delegate, 'src/test/unit/java', 'src/test/unit/resources')
			dependencies {
				implementation project()
				commonDependencies.each { implementation it }
				implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
				implementation 'org.junit.jupiter:junit-jupiter-params:5.10.0'
				addLombok(delegate)
			}
		}
		integration(JvmTestSuite) {
			configureSources(delegate, 'src/test/integration/java', 'src/test/integration/resources')
			dependencies {
				implementation project()
				commonDependencies.each { implementation it }
				implementation 'org.springframework.boot:spring-boot-starter-web'
				implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
				implementation 'org.testcontainers:postgresql:1.19.0'
				implementation 'org.testcontainers:mockserver:1.19.0'
				implementation 'org.testcontainers:junit-jupiter:1.19.0'
				implementation 'com.fasterxml.jackson.core:jackson-databind:2.15.0'
				addLombok(delegate)
			}
		}
		end2end(JvmTestSuite) {
			configureSources(delegate, 'src/test/end2end/java', 'src/test/end2end/resources')
			dependencies {
				implementation project()
				commonDependencies.each { implementation it }
				implementation 'org.testcontainers:junit-jupiter:1.19.0'
				addLombok(delegate)
			}
		}
	}
}

def jacocoHtmlOutput = layout.buildDirectory.dir("jacocoHtml")
def baseImage = "eclipse-temurin:17.0.6_10-jre-alpine"
def outputImage = "${repository}/${serviceName}"

tasks {
	test {
		useJUnitPlatform()
		finalizedBy jacocoTestReport
	}
}

tasks.getByName("integration") {
	finalizedBy jacocoTestReport
}

tasks.getByName("end2end") {
	dependsOn jibDockerBuild
	finalizedBy jacocoTestReport
}

jacocoTestReport {
	dependsOn test
	reports {
		xml.required.set(true)
		html.required.set(true)
		html.outputLocation.set(jacocoHtmlOutput)
	}
}

configurations.all {
	exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
}

jib {
	from {
		image = baseImage
	}
	to {
		image = outputImage
	}
}
